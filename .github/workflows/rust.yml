name: Rust

on:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
  MINISIGN_KEY: ${{ secrets.MINISIGN_KEY }}

jobs:
  trigger:
    uses: ./.github/workflows/build.yml

  check_tag:
    needs: trigger
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          version=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "::notice ::Version from Cargo.toml $version"
      - name: Check if version is a Git tag
        uses: mukunku/tag-exists-action@v1.6.0
        id: check_git_tag
        with:
          tag: '${{ steps.extract_version.outputs.version }}'

    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      exists: ${{ steps.check_git_tag.outputs.exists }}

  tag:
    if: ${{ needs.check_tag.outputs.exists == 'false' && github.ref == 'refs/heads/master' }}
    needs: check_tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create tag
        id: tagging
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a ${{ needs.check_tag.outputs.version }} -m "${{ needs.check_tag.outputs.version }}"
          git push origin ${{ needs.check_tag.outputs.version }}
          echo "::notice ::Created ${{ needs.check_tag.outputs.version }} tag"
          echo "created=true" >> $GITHUB_OUTPUT
      - name: Get Repository Name
        id: repository
        run: echo "name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT

    outputs:
      created: ${{ steps.tagging.outputs.created }}
      version: ${{ needs.check_tag.outputs.version }}
      executable: ${{ steps.repository.outputs.name }}

  release:
    if: ${{ github.ref == 'refs/heads/master' && needs.tag.outputs.created == 'true'}}
    needs: tag
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name: [
            linux,
            windows
        ]
        include:
          - name: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            exec: target/x86_64-unknown-linux-musl/release/${{ needs.tag.outputs.executable }}
            archive: x86_64-unknown-linux-musl.tgz
          - name: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            exec: target/x86_64-pc-windows-msvc/release/${{ needs.tag.outputs.executable }}.exe
            archive: x86_64-pc-windows-msvc.zip

    steps:
      - uses: actions/checkout@v4
      - name: Install toolchain
        uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Build ${{ matrix.target }} executable
        id: build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Collect ${{ matrix.target }} executable
        run: |
          cp ${{ matrix.exec }} .
      - name: Create ${{ matrix.target }} artifact
        run: |
          tar cvfz ${{ needs.tag.outputs.executable }}-${{ matrix.archive }} ${{ needs.tag.outputs.executable }}
        if: ${{ matrix.os == 'ubuntu-latest' }}
      - name: Create ${{ matrix.platform.file }} artifact
        uses: vimtor/action-zip@v1
        with:
          files: ${{ needs.tag.outputs.executable }}
          dest: ${{ needs.tag.outputs.executable }}-${{ matrix.archive }}
        if: ${{ matrix.os == 'windows-latest' }}
      - name: Upload ${{ matrix.platform.file }} artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.target }}
          path: ${{ needs.tag.outputs.executable }}-${{ matrix.archive }}
      - name: Print message
        run: echo "::notice ::Created binary for ${{ matrix.target }}"

    outputs:
      version: ${{ needs.tag.outputs.version }}

  publish:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Install tools on Linux
        run: sudo apt-get update --yes && sudo apt-get install --yes minisign
      - name: Download files
        uses: actions/download-artifact@v4
      - run: find
      - name: Sign packages
        run: |
          echo "::add-mask::${{ env.MINISIGN_KEY }}"
          mkdir -p ~/.minisign && echo "${{ env.MINISIGN_KEY }}" > ~/.minisign/minisign.key
          chmod 600 ~/.minisign/minisign.key
          ls -l ~/.minisign/minisign.key
          for file in ./artifacts-*/*.tgz ./artifacts-*/*.zip; do
            minisign -S -W -t "$GITHUB_REPOSITORY@$GITHUB_SHA $(date +'%Y-%m-%d %H-%M-%S') $GITHUB_RUN_ID" -x $file.sig -m $file
          done
          ls -l ./artifacts-*/*.sig
          rm -f ~/.minisign/minisign.key
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.release.outputs.version }}
          tag_name: ${{ needs.release.outputs.version }}
          files: |
            ./artifacts-*/*.tgz
            ./artifacts-*/*.tgz.sig
            ./artifacts-*/*.zip
            ./artifacts-*/*.zip.sig
      - name: Print message
        run: echo "::notice ::Created ${{ needs.release.outputs.version }} release"

  cargo-publish:
    needs: publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - run: cargo publish --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
