name: Rust

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install cargo-audit
        run: cargo install cargo-audit
      - name: Build
        run: cargo build --verbose
      - name: Test
        run: cargo test --verbose
      - name: Clippy
        run: cargo clippy --verbose -- -D warnings
      - name: Check Formatting
        run: cargo fmt -- --check
      - name: Audit
        run: cargo audit

  tag:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Check if only Cargo.toml and Cargo.lock are changed
        uses: tj-actions/changed-files@v36.1.0
        id: check_changes
        with:
          files: |
            Cargo.toml
            Cargo.lock
      - name: Extract version from Cargo.toml
        if: ${{ steps.check_changes.outputs.all_modified_files == 'Cargo.toml Cargo.lock' }}
        id: extract_version
        run: |
          version=$(cargo pkgid | cut -d# -f2 | cut -d: -f2)
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "::notice ::Version from Cargo.toml $version"
      - name: Check if version is a Git tag
        uses: mukunku/tag-exists-action@v1.2.0
        if: ${{ steps.check_changes.outputs.all_modified_files == 'Cargo.toml Cargo.lock' }}
        id: check_git_tag
        with:
          tag: 'v${{ steps.extract_version.outputs.version }}'
      - name: Create tag
        if: ${{ steps.check_git_tag.outputs.exists == 'false' }}
        id: tagging
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag -a v${{ steps.extract_version.outputs.version }} -m "v${{ steps.extract_version.outputs.version }}"
          git push origin v${{ steps.extract_version.outputs.version }}
          echo "::notice ::Created v${{ steps.extract_version.outputs.version }} tag"
          echo "created=true" >> $GITHUB_OUTPUT
      - name: Get Repository Name
        id: repository
        run: echo "name=${GITHUB_REPOSITORY#*/}" >> $GITHUB_OUTPUT

    outputs:
      created: ${{ steps.tagging.outputs.created }}
      version: v${{ steps.extract_version.outputs.version }}
      executable: ${{ steps.repository.outputs.name }}

  release:
    if: ${{ needs.tag.outputs.created == 'true'}}
    needs: tag
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        name: [
            linux
            ,windows
        ]
        include:
          - name: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            exec: target/x86_64-unknown-linux-musl/release/${{ needs.tag.outputs.executable }}
            file-name: release
          - name: windows
            os: windows-latest
            target: x86_64-pc-windows-msvc
            exec: target/x86_64-pc-windows-msvc/release/${{ needs.tag.outputs.executable }}.exe
            file-name: release

    steps:
      - uses: actions/checkout@v3
      - name: Install toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Build
        id: build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
      - name: Upload file
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ matrix.file-name }}
          path: ${{ matrix.exec }}
      - name: Print message
        run: echo "::notice ::Created binary for ${{ matrix.target }}"

    outputs:
      version: ${{ needs.tag.outputs.version }}

  publish:
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Download files
        uses: actions/download-artifact@v3.0.2
      - run: find
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.release.outputs.version }}
          tag_name: ${{ needs.release.outputs.version }}
          files: ./release/*
      - name: Print message
        run: echo "::notice ::Created ${{ needs.release.outputs.version }} release"

  cargp-publish:
    needs: publish
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          profile: minimal
          toolchain: stable
          override: true

      - run: cargo publish --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
